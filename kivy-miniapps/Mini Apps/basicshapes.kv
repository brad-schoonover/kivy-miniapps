#This is the kv file, where we will handle the creating the graphics for the widgets we had initialized in the python code.
#Since this looks a little confusing with the comments in place so in-between the graphic definitions for any widget
#I separate widgets with a dashed line.

#below is the reference to the Rectangle widget created in the python code dictated by the <> around the name.

<Rectangle1>:

#the function canvas creates the space in which the objects you draw can exist in, and you can dictate the size of the canvas as well.
#You do this by applying context and vertex instructions. Context are the colors and textures of the shape, and the Vertex defines the shape and lines of the object

	canvas:
	
#Below is the context instructions in work as color applied to the shape through rgb color code (to be a value anywhere between 0 and 1)
	
		Color:
			
			rgb: 1, 0, 0
		
#Tells to draw a solid rectangle on the canvas.
		
		Rectangle:

#size and position (pos) here are vertex instructions at work. The size and position here are defined in pixels, but can be defined in other ways as you will see later.
#the origin of the display canvas (otherwise as (0, 0) for position) is the bottom left corner
#Similarly every shape you create will have its own origin of were it draws out from, so a 100 pixel long by 50 pixel tall rectangles (0, 0) origin is also at the bottom left corner
	
			size: 100, 50
		
			pos: 200, 300
#-----------------------------------------------------------------------------------------------------------
#for a circle we have to use the Ellipse function
		
<Circle1>:
	canvas:
	
#the rgb color hooks on too the variables defined in the Circle class as rC,gC,and bC as numerical value rgb codes
		
		Color:
			rgb: self.rC, self.gC, self.bC
	
#telling to draw a ellipse thats 100 pixel tall and 100 pixel wide to make a circle
	
		Ellipse:

#below I have commented out the angle_start, and the angle_end where you can control how much of the circle you want drawn
#If you un-comment the angle_start, the angle_end attributes then the Circle will result as the top half of a circle. Kivy defines
#the angles of a circle differently than you would say as a unit circle in math (unit circles 0 degree angle being straight out to the right of the center).
#kivy starts 0 degrees from the 12 o'clock position of a clock (so directly above the center) and dictates positive to be clockwise.
			
			#angle_start: -90
			#angle_end: 90
			
			size: 100, 100

#Below I am defining the position to be in the center of the page, I use self.center, because every canvas has an attribute center,
#since and will take it from the center of the app window. 
		
			pos:self.center_x-50, self.center_y-50
#--------------------------------------------------------------------------------------------------------------
#We have to handle the Triangle function differently, the triangle function uses points so you can define them as 
#local variables in the kv file as how I've done it below with the #:set x1, #:setx2, #:set x3. #: set y1, #: set y2. It takes 3 set points to make the triangle
#so we enter them like regular coordinates as if you were graphing

#:set x1 600
#:set x2 700
#:set x3 650
#:set y1 100
#:set y2 200

		
<Triangle1>:
	canvas:
	
		Color:
			rgb: 1, 1, 1

#We tell to make a triangle and use the points we defined above with the points definition in the triangle.
	
		Triangle:

			points: x1,y1, x2,y1, x3,y2 			

#--------------------------------------------------------------------------------------------------------------

#to just make a straight line you need to use the Line bezier and 3 points, you can use bezier to make a curve line,
#Lines also have a ellipse attribute to them that can also create a curve. I use the Line functions to outline objects
#Since Kivy shapes do not have an outline themselves.

<Line1>
	canvas:
	
		Color:
			rgb: 1, 1, 1
	
		Line:
			bezier: self.center_x-200, self.center_y+300, self.center_x-150, self.center_y+300, self.center_x-100, self.center_y+300
			
		Line:
			ellipse: self.center_x-200, self.center_y+200, 50, 50
			
#This Main class we use to host all the other widgets in a, so in the kivy file we just center them on main app window 
#with center: self.parent.center.
			
<Main>:
	
	Line1:
		center: self.parent.center
		
	Triangle1:
		center: self.parent.center
		
	Circle1:
		center: self.parent.center
		
	Rectangle1:
		center: self.parent.center